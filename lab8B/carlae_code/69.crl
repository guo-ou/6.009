(define n 7)
(define make-counter (lambda (n) (lambda () (begin (set! n (+ n 1)) n))))
(define ca (make-counter 0))
(ca)
(ca)
n
(define cb (make-counter 20))
(cb)
(+ (ca) (cb) (ca) (cb))
n
(ca)
(cb)
(cb)
(cb)
(cb)
(ca)
(ca)
(ca)
(ca)
(cb)
(ca)
(cb)
(cb)
(ca)
(cb)
(ca)
(ca)
(ca)
(ca)
(ca)
(cb)
(cb)
(ca)
(cb)
(ca)
(cb)
(cb)
(ca)
(cb)
(cb)
(ca)
(ca)
(cb)
(cb)
(ca)
(ca)
(ca)
(cb)
(ca)
(ca)
(cb)
(ca)
(cb)
(cb)
(ca)
(ca)
(ca)
(cb)
(ca)
(cb)
(cb)
(cb)
(cb)
(cb)
(cb)
(ca)
(cb)
(cb)
(ca)
(ca)
(ca)
(cb)
(cb)
(cb)
(ca)
(ca)
(ca)
(ca)
(cb)
(cb)
(cb)
(cb)
(ca)
(cb)
(cb)
(cb)
(cb)
(cb)
(ca)
(ca)
(ca)
(cb)
(cb)
(ca)
(ca)
(ca)
(cb)
(ca)
(cb)
(ca)
(ca)
(cb)
(ca)
(ca)
(ca)
(ca)
(cb)
(cb)
(ca)
(cb)
(cb)
(ca)
(ca)
(ca)
(ca)
(cb)
(cb)
(cb)
(ca)
(ca)
(ca)
(ca)
(cb)
(cb)
(ca)
(ca)
(cb)
(ca)
(cb)
(cb)
(cb)
(ca)
(ca)
(ca)
(ca)
(cb)
(cb)
(ca)
(cb)
(ca)
(ca)
(cb)
(ca)
(cb)
(cb)
(ca)
(cb)
(ca)
(ca)
(ca)
(cb)
(cb)
(ca)
(cb)
(cb)
(cb)
(ca)
(cb)
(ca)
(cb)
(cb)
(cb)
(ca)
(ca)
(ca)
(cb)
(cb)
(cb)
(cb)
(ca)
(ca)
(cb)
(ca)
(ca)
(ca)
(ca)
(cb)
(cb)
(ca)
(cb)
(ca)
(ca)
(cb)
(cb)
(ca)
(ca)
(cb)
(ca)
(cb)
(cb)
(cb)
(ca)
(ca)
(ca)
(cb)
(ca)
(cb)
(ca)
(cb)
(ca)
(ca)
(cb)
(ca)
(ca)
(ca)
(ca)
(ca)
(ca)
(ca)
(ca)
(define (addN counter n) (if (= 1 n) (counter) (begin (addN counter (- n 1)) (counter))))
(addN ca 24)
(addN cb 37)
