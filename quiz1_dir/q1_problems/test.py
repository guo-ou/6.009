#!/usr/bin/env python3
import os
import quiz
import unittest

TEST_DIRECTORY = os.path.dirname(__file__)

##################################################
##  Problem 01 Tests
##################################################

big1 = [
    759, 843, 886, 235, 891, 378, 344, 730, 42, 346,
    928, 360, 622, 385, 161, 481, 614, 817, 203, 533,
    468, 595, 427, 65, 254, 249, 961, 909, 19, 552,
    83, 135, 77, 614, 321, 464, 833, 228, 232, 53,
    70, 669, 995, 724, 264, 952, 949, 326, 0, 460,
    638, 808, 924, 216, 185, 164, 862, 449, 309, 561,
    592, 774, 165, 782, 100, 613, 72, 396, 550, 114,
    457, 914, 563, 923, 474, 644, 325, 563, 252, 645,
    343, 663, 424, 566, 234, 326, 777, 493, 628, 308,
    907, 28, 430, 245, 250, 120, 328, 141, 810, 446,
    661, 88, 969, 559, 219, 859, 657, 255, 224, 207,
    836, 906, 574, 49, 133, 858, 362, 164, 531, 126,
    838, 353, 151, 103, 892, 832, 503, 329, 735, 70,
    45, 191, 695, 654, 44, 927, 786, 68, 425, 435,
    780, 183, 882, 384, 856, 933, 681, 528, 92, 864,
    924, 654, 656, 41, 838, 182, 703, 960, 327, 846,
    52, 599, 14, 802, 690, 433, 557, 707, 771, 215,
    517, 209, 64, 719, 824, 538, 160, 388, 470, 320,
    918, 406, 955, 200, 367, 615, 387, 887, 59, 246,
    158, 472, 294, 546, 529, 194, 426, 111, 890, 94,
    283, 322, 623, 569, 795, 128, 895, 402, 197, 917,
    805, 975, 941, 106, 148, 998, 664, 658, 538, 23,
    872, 631, 44, 434, 705, 598, 375, 830, 863, 685,
    29, 262, 916, 75, 660, 756, 604, 502, 430, 942,
    149, 980, 638, 417, 680, 442, 467, 652, 341, 382,
    25, 247, 464, 855, 220, 650, 378, 523, 598, 65,
    26, 617, 671, 697, 373, 490, 875, 138, 969, 277,
    655, 113, 999, 806, 469, 171, 13, 770, 547, 479,
    318, 553, 836, 117, 559, 115, 417, 703, 752, 53,
    370, 717, 377, 436, 3, 424, 286, 342, 533, 894,
    218, 796, 537, 712, 515, 915, 374, 975, 946, 792,
    840, 485, 303, 365, 555, 734, 653, 666, 678, 833,
    900, 812, 349, 298, 153, 747, 657, 364, 876, 977,
    422, 781, 474, 877, 34, 772, 140, 672, 669, 329,
    531, 111, 727, 71, 107, 251, 494, 110, 57, 7,
    247, 123, 325, 351, 807, 865, 112, 433, 87, 345,
    198, 129, 997, 436, 289, 634, 447, 412, 855, 885,
    266, 437, 206, 900, 767, 797, 282, 392, 645, 908,
    309, 721, 694, 662, 27, 702, 742, 926, 964, 137,
    796, 635, 520, 972, 180, 676, 911, 346, 236, 105,
    63, 243, 155, 227, 476, 694, 211, 74, 438, 166,
    67, 405, 223, 267, 875, 832, 137, 160, 339, 625,
    312, 312, 582, 860, 673, 134, 279, 253, 943, 526,
    899, 260, 665, 134, 561, 827, 205, 930, 763, 778,
    687, 216, 690, 897, 588, 19, 399, 965, 252, 684,
    159, 626, 704, 7, 311, 619, 819, 652, 177, 627,
    755, 967, 191, 961, 357, 195, 592, 413, 319, 404,
    668, 907, 600, 902, 84, 458, 801, 154, 39, 601,
    266, 310, 121, 323, 319, 116, 8, 820, 284, 169,
    185, 502, 695, 120, 581, 43, 23, 633, 297, 124,
    659, 611, 447, 246, 521, 704, 133, 642, 623, 147,
    938, 933, 610, 570, 945, 71, 400, 8, 799, 112,
    898, 117, 236, 700, 455, 429, 662, 841, 575, 43,
    371, 213, 963, 399, 682, 603, 733, 741, 256, 637,
    400, 403, 40, 681, 5, 896, 244, 99, 903, 553,
    750, 98, 455, 373, 175, 780, 893, 389, 439, 544,
    38, 745, 968, 760, 785, 689, 525, 587, 412, 813,
    668, 860, 572, 616, 3, 683, 789, 698, 268, 641,
    844, 794, 11, 943, 483, 825, 667, 932, 948, 527,
    921, 230, 753, 821, 340, 42, 167, 250, 973, 448,
    881, 976, 541, 106, 269, 86, 877, 586, 600, 972,
    15, 725, 233, 170, 31, 765, 705, 558, 273, 526,
    549, 608, 94, 913, 971, 541, 471, 942, 174, 522,
    617, 60, 214, 536, 577, 738, 916, 794, 866, 634,
    816, 573, 831, 457, 136, 237, 507, 853, 453, 322,
    621, 576, 301, 756, 381, 140, 259, 879, 55, 748,
    146, 368, 97, 40, 406, 85, 295, 728, 366, 701,
    891, 396, 988, 749, 488, 395, 131, 869, 237, 426,
    994, 204, 511, 572, 448, 96, 693, 221, 994, 54,
    341, 56, 571, 257, 415, 745, 199, 754, 475, 665,
    240, 189, 511, 233, 576, 484, 49, 69, 711, 210,
    12, 883, 560, 261, 68, 334, 242, 803, 762, 567,
    37, 58, 182, 862, 391, 9, 670, 299, 822, 2,
    350, 4, 57, 204, 624, 212, 172, 814, 78, 987,
    203, 514, 47, 861, 651, 778, 809, 699, 736, 491,
    450, 573, 141, 852, 73, 355, 470, 991, 113, 76,
    640, 795, 699, 797, 714, 955, 225, 231, 300, 166,
    484, 50, 989, 761, 298, 847, 966, 300, 258, 565,
    152, 452, 880, 345, 55, 594, 454, 957, 234, 209,
    32, 737, 500, 17, 34, 410, 332, 621, 155, 602,
    149, 988, 179, 724, 22, 260, 100, 130, 717, 14,
    104, 446, 570, 520, 482, 429, 310, 354, 357, 580,
    274, 394, 21, 284, 492, 612, 18, 594, 466, 154,
    807, 46, 254, 929, 837, 919, 421, 150, 201, 774,
    861, 172, 562, 456, 506, 608, 977, 757, 845, 523,
    589, 516, 143, 558, 818, 848, 24, 607, 653, 545,
    223, 985, 198, 52, 707, 61, 729, 206, 459, 971,
    259, 543, 176, 380, 688, 33, 585, 0, 337, 650,
    165, 281, 636, 750, 278, 868, 217, 781, 667, 596,
    306, 35, 764, 121, 110, 228, 870, 407, 36, 539,
    420, 939, 521, 291, 337, 497, 173, 15, 317, 404,
    374, 313, 689, 611, 479, 302, 956, 966, 732, 90,
    230, 265, 82, 1, 940, 332, 491, 318, 743, 555,
    313, 550, 709, 392, 519, 574, 927, 304, 976, 47,
    359, 632, 290, 445, 808, 595, 28, 443, 13, 432,
    534, 867, 331, 331, 757, 463, 305, 361, 108, 292,
    368, 914, 101, 353, 706, 244, 633, 784, 229, 640,
    801, 991, 51, 782, 710, 785, 887, 495, 513, 863,
    787, 811, 800, 735, 467, 320, 819, 589, 692, 922,
    401, 498, 583, 509, 283, 760, 519, 129, 324, 959,
    330, 918, 716, 779, 716, 264, 289, 162, 261, 382,
    587, 276, 607, 163, 925, 909, 723, 367, 950, 443,
    765, 419, 276, 239, 934, 739, 267, 139, 688, 624,
    425, 951, 50, 826, 509, 912, 816, 510, 485, 278,
    979, 828, 823, 670, 749, 330, 199, 818, 890, 584,
    380, 240, 639, 201, 616, 980, 937, 494, 658, 66,
    431, 213, 75, 150, 372, 24, 366, 59, 720, 287,
    501, 136, 528, 649, 316, 754, 442, 726, 981, 766,
    288, 118, 379, 604, 315, 386, 527, 450, 609, 431,
    387, 725, 769, 159, 444, 737, 1, 411, 935, 789,
    878, 409, 835, 872, 423, 358, 691, 486, 388, 768,
    542, 968, 74, 753, 99, 335, 518, 297, 609, 788,
    377, 906, 990, 711, 119, 127, 921, 599, 590, 229,
    999, 545, 989, 517, 540, 288, 548, 581, 726, 418,
    764, 500, 398, 437, 593, 829, 504, 857, 696, 418,
    702, 82, 507, 2, 643, 686, 905, 743, 603, 268,
    175, 744, 263, 532, 995, 583, 411, 200, 441, 248,
    194, 451, 402, 986, 54, 227, 41, 376, 791, 505,
    804, 854, 929, 168, 156, 441, 170, 338, 958, 755,
    130, 543, 880, 119, 524, 335, 848, 190, 163, 95,
    270, 107, 459, 984, 722, 713, 779, 845, 758, 510,
    734, 858, 923, 851, 691, 109, 21, 893, 241, 36,
    379, 89, 761, 432, 218, 874, 773, 153, 944, 615,
    767, 910, 898, 452, 127, 626, 61, 142, 629, 249,
    889, 798, 39, 226, 480, 878, 282, 551, 397, 920,
    262, 661, 219, 91, 162, 522, 26, 839, 886, 393,
    48, 983, 815, 416, 806, 829, 328, 486, 901, 301,
    895, 901, 578, 631, 674, 849, 181, 215, 333, 904,
    879, 730, 295, 512, 145, 871, 307, 393, 108, 383,
    63, 712, 996, 751, 812, 316, 992, 963, 314, 195,
    857, 793, 62, 814, 715, 763, 504, 188, 564, 771,
    338, 612, 939, 410, 835, 462, 220, 922, 882, 998,
    394, 174, 706, 518, 4, 854, 469, 294, 560, 168,
    466, 462, 790, 759, 659, 354, 515, 723, 327, 173,
    235, 800, 926, 225, 122, 775, 892, 468, 834, 186,
    647, 86, 811, 79, 365, 758, 784, 145, 189, 937,
    139, 539, 126, 286, 556, 449, 605, 597, 841, 248,
    798, 69, 683, 214, 948, 580, 147, 305, 514, 635,
    727, 889, 959, 751, 461, 64, 951, 390, 67, 48,
    473, 271, 554, 946, 167, 303, 76, 799, 738, 825,
    132, 401, 620, 747, 275, 45, 5, 152, 672, 493,
    407, 885, 673, 281, 307, 477, 372, 271, 917, 630,
    748, 135, 953, 177, 516, 473, 273, 834, 81, 89,
    982, 391, 981, 852, 421, 138, 953, 996, 114, 187,
    746, 910, 62, 881, 850, 352, 870, 805, 585, 296,
    978, 207, 465, 982, 919, 202, 383, 655, 496, 577,
    954, 866, 601, 962, 847, 544, 641, 790, 460, 84,
    945, 461, 146, 386, 850, 913, 211, 339, 226, 38,
    721, 348, 87, 530, 122, 908, 245, 938, 962, 238,
    416, 934, 964, 488, 384, 915, 6, 256, 947, 503,
    568, 451, 817, 208, 497, 35, 224, 871, 701, 323,
    960, 78, 17, 178, 896, 979, 949, 708, 713, 978,
    25, 884, 899, 369, 90, 475, 356, 876, 993, 676,
    445, 102, 413, 783, 656, 902, 508, 967, 629, 487,
    698, 176, 697, 444, 205, 290, 72, 187, 142, 720,
    957, 770, 762, 347, 869, 272, 465, 505, 263, 415,
    930, 793, 478, 547, 596, 88, 472, 190, 715, 546,
    766, 935, 525, 776, 255, 675, 125, 458, 414, 501,
    456, 293, 710, 16, 783, 894, 371, 83, 524, 102,
    551, 414, 820, 708, 171, 950, 32, 826, 342, 336,
    265, 512, 210, 940, 868, 610, 93, 124, 844, 993,
    997, 123, 579, 768, 822, 729, 554, 186, 566, 912,
    349, 336, 77, 293, 440, 632, 842, 422, 196, 786,
    258, 10, 489, 905, 970, 888, 578, 97, 405, 81,
    663, 731, 787, 985, 439, 846, 251, 358, 91, 865,
    11, 506, 679, 874, 605, 740, 775, 535, 498, 685,
    674, 351, 257, 184, 642, 180, 46, 161, 291, 824,
    830, 769, 453, 232, 992, 12, 588, 489, 222, 627,
    983, 428, 363, 471, 196, 936, 355, 6, 856, 37,
    552, 740, 80, 810, 530, 30, 132, 536, 606, 920,
    79, 157, 932, 837, 315, 96, 722, 613, 104, 304,
    873, 675, 314, 584, 483, 269, 671, 156, 965, 239,
    718, 333, 20, 93, 499, 687, 582, 746, 677, 728,
    567, 103, 352, 131, 508, 178, 575, 884, 709, 487,
    311, 308, 363, 58, 105, 370, 423, 956, 9, 361,
    741, 815, 644, 317, 435, 128, 495, 802, 873, 849,
    954, 586, 395, 287, 590, 481, 742, 897, 788, 30,
    347, 148, 274, 618, 666, 903, 101, 651, 285, 700,
    496, 270, 296, 202, 974, 732, 928, 532, 696, 648,
    680, 144, 537, 241, 389, 360, 212, 637, 385, 463,
    184, 731, 428, 208, 253, 678, 682, 677, 478, 931,
    143, 529, 809, 591, 936, 931, 813, 647, 183, 840,
    280, 193, 827, 490, 839, 408, 904, 619, 973, 684,
    719, 941, 851, 564, 843, 859, 20, 238, 115, 157,
    390, 970, 409, 864, 739, 321, 343, 285, 984, 375,
    243, 499, 579, 73, 242, 542, 217, 773, 772, 434,
    306, 60, 776, 986, 277, 792, 16, 628, 18, 192,
    116, 639, 56, 630, 718, 974, 95, 85, 686, 381,
    169, 362, 192, 777, 636, 22, 350, 302, 109, 597,
    92, 98, 10, 842, 348, 408, 925, 476, 831, 403,
    369, 427, 987, 549, 649, 693, 643, 66, 344, 853,
    359, 958, 492, 513, 197, 736, 144, 752, 193, 714,
    398, 803, 602, 823, 340, 568, 618, 376, 477, 179,
    620, 569, 482, 952, 292, 151, 648, 562, 990, 535,
    947, 324, 31, 80, 397, 334, 660, 231, 622, 744,
    867, 679, 222, 548, 911, 118, 591, 692, 29, 33,
    540, 664, 440, 556, 888, 646, 821, 883, 606, 454,
    279, 27, 420, 125, 480, 419, 571, 791, 221, 828,
    646, 593, 565, 356, 438, 804, 280, 534, 299, 181,
    733, 272, 557, 275, 625, 158, 51, 944, 364, 188,
]

big2 = [
    722408, 443705, 550633, 354953, 761950, 14644, 308457, 628056, 373812, 805243,
    221422, 981239, 133025, 961038, 206696, 448083, 620935, 620364, 216458, 225811,
    526349, 297962, 450849, 622752, 866090, 399274, 16018, 663022, 916513, 187410,
    474390, 918166, 569416, 140325, 997015, 624081, 797813, 973678, 636864, 209009,
    295503, 411772, 587868, 530023, 427281, 473939, 912844, 636181, 303295, 972359,
    684651, 147209, 524013, 764734, 451137, 947571, 884760, 671198, 262103, 297977,
    737220, 337658, 500565, 944502, 645619, 258517, 785373, 470809, 236695, 655307,
    306374, 892412, 299259, 793900, 268252, 930115, 942882, 855965, 539493, 325624,
    225731, 249321, 574057, 559463, 537566, 342876, 562255, 496516, 297447, 933708,
    430942, 16969, 819379, 704665, 99488, 574451, 495851, 613921, 855077, 153559534,
    500419872, 100788358, 344557011, 136995371, 549599992, 378494465, 323914814, 425453393, 436027885, 255154191,
    256686843, 86959318, 53818043, 310664936, 263482752, 148506492, 576092966, 519264203, 699142833, 190389867,
    246304257, 544027320, 41061758, 287410672, 368515379, 266678105, 64352143, 304180662, 438258850, 465455693,
    427540021, 265704327, 409069750, 148775118, 67111830, 279990456, 446335184, 627974459, 80911431, 596162690,
    11160798, 19940085, 463133143, 553844684, 278461489, 445620141, 692617145, 538206556, 612344141, 510003990,
    73827777, 559764761, 83063707, 198906149, 574262823, 367143445, 328241857, 216312236, 521723970, 561957447,
    470627916, 146038629, 279524895, 637166256, 597755567, 334191441, 488889038, 658640722, 678477973, 24853779,
    298725606, 251328116, 336969847, 413748611, 1444833, 185484698, 607727450, 422717511, 580322500, 581843615,
    120243974, 66761457, 13798581, 590482647, 312060040, 400383359, 447678517, 129484616, 96118294, 43641928,
    188937110, 540262676, 183694551, 228250767, 383672240, 595674283, 1146420, 431298847, 376846707, 722408,
    443705, 550633, 354953, 761950, 14644, 308457, 628056, 373812, 805243, 221422,
    981239, 133025, 961038, 206696, 448083, 620935, 620364, 216458, 225811, 526349,
    297962, 450849, 622752, 866090, 399274, 16018, 663022, 916513, 187410, 474390,
    918166, 569416, 140325, 997015, 624081, 797813, 973678, 636864, 209009, 295503,
    411772, 587868, 530023, 427281, 473939, 912844, 636181, 303295, 972359, 684651,
    147209, 524013, 764734, 451137, 947571, 884760, 671198, 262103, 297977, 737220,
    337658, 500565, 944502, 645619, 258517, 785373, 470809, 236695, 655307, 306374,
    892412, 299259, 793900, 268252, 930115, 942882, 855965, 539493, 325624, 225731,
    249321, 574057, 559463, 537566, 342876, 562255, 496516, 297447, 933708, 430942,
    16969, 819379, 704665, 99488, 574451, 495851, 613921, 855077, 153559534, 500419872,
    100788358, 344557011, 136995371, 549599992, 378494465, 323914814, 425453393, 436027885, 255154191, 256686843,
    86959318, 53818043, 310664936, 263482752, 148506492, 576092966, 519264203, 699142833, 190389867, 246304257,
    544027320, 41061758, 287410672, 368515379, 266678105, 64352143, 304180662, 438258850, 465455693, 427540021,
    265704327, 409069750, 148775118, 67111830, 279990456, 446335184, 627974459, 80911431, 596162690, 11160798,
    19940085, 463133143, 553844684, 278461489, 445620141, 692617145, 538206556, 612344141, 510003990, 73827777,
    559764761, 83063707, 198906149, 574262823, 367143445, 328241857, 216312236, 521723970, 561957447, 470627916,
    146038629, 279524895, 637166256, 597755567, 334191441, 488889038, 658640722, 678477973, 24853779, 298725606,
    251328116, 336969847, 413748611, 1444833, 185484698, 607727450, 422717511, 580322500, 581843615, 120243974,
    66761457, 13798581, 590482647, 312060040, 400383359, 447678517, 129484616, 96118294, 43641928, 188937110,
    540262676, 183694551, 228250767, 383672240, 595674283, 1146420, 431298847, 376846707, 18895280, 642902806,
    241660291, 593769018, 119372605, 640210637, 648404373, 197803816, 575859891, 604210711, 514369913, 382398583,
    148998479, 47473105, 442811601, 450741598, 543603432, 248591540, 516486503, 538617868, 398732719, 643138962,
    247764757, 399256845, 3888078, 264124641, 449913667, 80837126, 541379517, 234523551, 35685448, 170766408,
    505438802, 25365514, 575897057, 637356657, 441531793, 103327816, 32344431, 601307714, 432309814, 214683869,
    105349652, 554091929, 677621473, 652069548, 289127535, 326497121, 291523644, 21818258, 520752986, 582761956,
    406504255, 102847261, 318439667, 648445700, 695503711, 532984751, 119202899, 445887452, 522415105, 178680955,
    572299195, 618192881, 571279541, 99048801, 642041786, 144833392, 302895636, 54515803, 453081186, 169239824,
    295676374, 223198689, 673513460, 299945206, 611053566, 317730974, 648475793, 180014600, 283798325, 356967921,
    101616275, 196889138, 687760582, 698439075, 281069248, 84777551, 422692680, 16426666, 49317918, 366388577,
    485208235, 584783670, 141245314, 402237434, 377516883, 104571054, 375517718, 4969233, 18895280, 642902806,
    241660291, 593769018, 119372605, 640210637, 648404373, 197803816, 575859891, 604210711, 514369913, 382398583,
    148998479, 47473105, 442811601, 450741598, 543603432, 248591540, 516486503, 538617868, 398732719, 643138962,
    247764757, 399256845, 3888078, 264124641, 449913667, 80837126, 541379517, 234523551, 35685448, 170766408,
    505438802, 25365514, 575897057, 637356657, 441531793, 103327816, 32344431, 601307714, 432309814, 214683869,
    105349652, 554091929, 677621473, 652069548, 289127535, 326497121, 291523644, 21818258, 520752986, 582761956,
    406504255, 102847261, 318439667, 648445700, 695503711, 532984751, 119202899, 445887452, 522415105, 178680955,
    572299195, 618192881, 571279541, 99048801, 642041786, 144833392, 302895636, 54515803, 453081186, 169239824,
    295676374, 223198689, 673513460, 299945206, 611053566, 317730974, 648475793, 180014600, 283798325, 356967921,
    101616275, 196889138, 687760582, 698439075, 281069248, 84777551, 422692680, 16426666, 49317918, 366388577,
    485208235, 584783670, 141245314, 402237434, 377516883, 104571054, 375517718, 4969233, 511642751, 83348901,
    67602729, 972081939, 1646259187, 1424260066, 1380694369, 38866015, 1323955745, 1242944616, 279177682, 363454540,
    334332868, 452661696, 195817747, 346665969, 1060935825, 1652047596, 1171954275, 1454586257, 635621642, 1768900157,
    871684074, 1338397378, 98483371, 133773660, 492129161, 878786349, 1356608230, 1227018730, 565390776, 660485833,
    620478603, 512435617, 815189469, 1463467386, 848703397, 870859839, 1468756411, 657120553, 25332275, 213448985,
    936973294, 791884988, 847883560, 400666935, 1190709567, 235854895, 199375879, 1218488201, 372062413, 1409563679,
    56005761, 1063816256, 589889433, 543158262, 888663465, 992498415, 628225637, 1108861854, 215032819, 31643071,
    1292427326, 445299847, 1340534290, 187398191, 781968465, 1167739325, 1467831360, 1011086442, 341794207, 259060628,
    1208490518, 437917348, 195577753, 800505241, 92987700, 1598351808, 1703134817, 1008798023, 46330155, 1741973856,
    1605246946, 635364342, 1103163852, 851601016, 469071194, 886305163, 776352694, 1754859259, 203246514, 212295670,
    1723515831, 272576363, 1303724765, 501901201, 1369211617, 1114867570, 1199872673, 272974494, 511642751, 83348901,
    67602729, 972081939, 1646259187, 1424260066, 1380694369, 38866015, 1323955745, 1242944616, 279177682, 363454540,
    334332868, 452661696, 195817747, 346665969, 1060935825, 1652047596, 1171954275, 1454586257, 635621642, 1768900157,
    871684074, 1338397378, 98483371, 133773660, 492129161, 878786349, 1356608230, 1227018730, 565390776, 660485833,
    620478603, 512435617, 815189469, 1463467386, 848703397, 870859839, 1468756411, 657120553, 25332275, 213448985,
    936973294, 791884988, 847883560, 400666935, 1190709567, 235854895, 199375879, 1218488201, 372062413, 1409563679,
    56005761, 1063816256, 589889433, 543158262, 888663465, 992498415, 628225637, 1108861854, 215032819, 31643071,
    1292427326, 445299847, 1340534290, 187398191, 781968465, 1167739325, 1467831360, 1011086442, 341794207, 259060628,
    1208490518, 437917348, 195577753, 800505241, 92987700, 1598351808, 1703134817, 1008798023, 46330155, 1741973856,
    1605246946, 635364342, 1103163852, 851601016, 469071194, 886305163, 776352694, 1754859259, 203246514, 212295670,
    1723515831, 272576363, 1303724765, 501901201, 1369211617, 1114867570, 1199872673, 272974494, 1015611883, 595983349,
    551549754, 303866296, 803413887, 152099208, 938655064, 1002884172, 1133110322, 280456041, 121784367, 320804228,
    210039843, 519411697, 506645239, 102708776, 3746418, 804281611, 646959136, 719205537, 191920016, 191111499,
    234856626, 506292430, 496050862, 1022576086, 680053018, 347738490, 878564756, 112532034, 248757565, 476860441,
    541440185, 808633267, 547403873, 411868861, 719319303, 167826715, 169965747, 881994647, 288978228, 216189644,
    318626495, 1012624286, 359183435, 205645575, 701399879, 753457820, 1060112087, 41398887, 195462555, 849453381,
    903043708, 372959508, 8880032, 602988147, 930110076, 1084276118, 49754901, 233726890, 322724693, 1054288540,
    409623713, 13672176, 674491152, 179154094, 185238174, 210577452, 1027763064, 456690362, 435846012, 483046665,
    772917372, 446655986, 70615501, 274653947, 457476451, 466903204, 923245873, 951703887, 141217222, 808264910,
    1125498971, 839262099, 644130265, 936724658, 293458623, 415569596, 255336604, 90012372, 718547408, 846964002,
    787038308, 206932389, 368228891, 929864796, 818622, 876180189, 442289392, 457424467, 1015611883, 595983349,
    551549754, 303866296, 803413887, 152099208, 938655064, 1002884172, 1133110322, 280456041, 121784367, 320804228,
    210039843, 519411697, 506645239, 102708776, 3746418, 804281611, 646959136, 719205537, 191920016, 191111499,
    234856626, 506292430, 496050862, 1022576086, 680053018, 347738490, 878564756, 112532034, 248757565, 476860441,
    541440185, 808633267, 547403873, 411868861, 719319303, 167826715, 169965747, 881994647, 288978228, 216189644,
    318626495, 1012624286, 359183435, 205645575, 701399879, 753457820, 1060112087, 41398887, 195462555, 849453381,
    903043708, 372959508, 8880032, 602988147, 930110076, 1084276118, 49754901, 233726890, 322724693, 1054288540,
    409623713, 13672176, 674491152, 179154094, 185238174, 210577452, 1027763064, 456690362, 435846012, 483046665,
    772917372, 446655986, 70615501, 274653947, 457476451, 466903204, 923245873, 951703887, 141217222, 808264910,
    1125498971, 839262099, 644130265, 936724658, 293458623, 415569596, 255336604, 90012372, 718547408, 846964002,
    787038308, 206932389, 368228891, 929864796, 818622, 876180189, 442289392, 457424467, 1015611883, 595983349,
    551549754, 303866296, 803413887, 152099208, 938655064, 1002884172, 1133110322, 280456041, 121784367, 320804228,
    210039843, 519411697, 506645239, 102708776, 3746418, 804281611, 646959136, 719205537, 191920016, 191111499,
    234856626, 506292430, 496050862, 1022576086, 680053018, 347738490, 878564756, 112532034, 248757565, 476860441,
    541440185, 808633267, 547403873, 411868861, 719319303, 167826715, 169965747, 881994647, 288978228, 216189644,
    318626495, 1012624286, 359183435, 205645575, 701399879, 753457820, 1060112087, 41398887, 195462555, 849453381,
    903043708, 372959508, 8880032, 602988147, 930110076, 1084276118, 49754901, 233726890, 322724693, 1054288540,
    409623713, 13672176, 674491152, 179154094, 185238174, 210577452, 1027763064, 456690362, 435846012, 483046665,
    772917372, 446655986, 70615501, 274653947, 457476451, 466903204, 923245873, 951703887, 141217222, 808264910,
    1125498971, 839262099, 644130265, 936724658, 293458623, 415569596, 255336604, 90012372, 718547408, 846964002,
    787038308, 206932389, 368228891, 929864796, 818622, 876180189, 442289392, 457424467, 18895280, 642902806,
    241660291, 593769018, 119372605, 640210637, 648404373, 197803816, 575859891, 604210711, 514369913, 382398583,
    148998479, 47473105, 442811601, 450741598, 543603432, 248591540, 516486503, 538617868, 398732719, 643138962,
    247764757, 399256845, 3888078, 264124641, 449913667, 80837126, 541379517, 234523551, 35685448, 170766408,
    505438802, 25365514, 575897057, 637356657, 441531793, 103327816, 32344431, 601307714, 432309814, 214683869,
    105349652, 554091929, 677621473, 652069548, 289127535, 326497121, 291523644, 21818258, 520752986, 582761956,
    406504255, 102847261, 318439667, 648445700, 695503711, 532984751, 119202899, 445887452, 522415105, 178680955,
    572299195, 618192881, 571279541, 99048801, 642041786, 144833392, 302895636, 54515803, 453081186, 169239824,
    295676374, 223198689, 673513460, 299945206, 611053566, 317730974, 648475793, 180014600, 283798325, 356967921,
    101616275, 196889138, 687760582, 698439075, 281069248, 84777551, 422692680, 16426666, 49317918, 366388577,
    485208235, 584783670, 141245314, 402237434, 377516883, 104571054, 375517718, 4969233, 153559534, 500419872,
    100788358, 344557011, 136995371, 549599992, 378494465, 323914814, 425453393, 436027885, 255154191, 256686843,
    86959318, 53818043, 310664936, 263482752, 148506492, 576092966, 519264203, 699142833, 190389867, 246304257,
    544027320, 41061758, 287410672, 368515379, 266678105, 64352143, 304180662, 438258850, 465455693, 427540021,
    265704327, 409069750, 148775118, 67111830, 279990456, 446335184, 627974459, 80911431, 596162690, 11160798,
    19940085, 463133143, 553844684, 278461489, 445620141, 692617145, 538206556, 612344141, 510003990, 73827777,
    559764761, 83063707, 198906149, 574262823, 367143445, 328241857, 216312236, 521723970, 561957447, 470627916,
    146038629, 279524895, 637166256, 597755567, 334191441, 488889038, 658640722, 678477973, 24853779, 298725606,
    251328116, 336969847, 413748611, 1444833, 185484698, 607727450, 422717511, 580322500, 581843615, 120243974,
    66761457, 13798581, 590482647, 312060040, 400383359, 447678517, 129484616, 96118294, 43641928, 188937110,
    540262676, 183694551, 228250767, 383672240, 595674283, 1146420, 431298847, 376846707, 511642751, 83348901,
    67602729, 972081939, 1646259187, 1424260066, 1380694369, 38866015, 1323955745, 1242944616, 279177682, 363454540,
    334332868, 452661696, 195817747, 346665969, 1060935825, 1652047596, 1171954275, 1454586257, 635621642, 1768900157,
    871684074, 1338397378, 98483371, 133773660, 492129161, 878786349, 1356608230, 1227018730, 565390776, 660485833,
    620478603, 512435617, 815189469, 1463467386, 848703397, 870859839, 1468756411, 657120553, 25332275, 213448985,
    936973294, 791884988, 847883560, 400666935, 1190709567, 235854895, 199375879, 1218488201, 372062413, 1409563679,
    56005761, 1063816256, 589889433, 543158262, 888663465, 992498415, 628225637, 1108861854, 215032819, 31643071,
    1292427326, 445299847, 1340534290, 187398191, 781968465, 1167739325, 1467831360, 1011086442, 341794207, 259060628,
    1208490518, 437917348, 195577753, 800505241, 92987700, 1598351808, 1703134817, 1008798023, 46330155, 1741973856,
    1605246946, 635364342, 1103163852, 851601016, 469071194, 886305163, 776352694, 1754859259, 203246514, 212295670,
    1723515831, 272576363, 1303724765, 501901201, 1369211617, 1114867570, 1199872673, 272974494, 1015611883, 595983349,
    551549754, 303866296, 803413887, 152099208, 938655064, 1002884172, 1133110322, 280456041, 121784367, 320804228,
    210039843, 519411697, 506645239, 102708776, 3746418, 804281611, 646959136, 719205537, 191920016, 191111499,
    234856626, 506292430, 496050862, 1022576086, 680053018, 347738490, 878564756, 112532034, 248757565, 476860441,
    541440185, 808633267, 547403873, 411868861, 719319303, 167826715, 169965747, 881994647, 288978228, 216189644,
    318626495, 1012624286, 359183435, 205645575, 701399879, 753457820, 1060112087, 41398887, 195462555, 849453381,
    903043708, 372959508, 8880032, 602988147, 930110076, 1084276118, 49754901, 233726890, 322724693, 1054288540,
    409623713, 13672176, 674491152, 179154094, 185238174, 210577452, 1027763064, 456690362, 435846012, 483046665,
    772917372, 446655986, 70615501, 274653947, 457476451, 466903204, 923245873, 951703887, 141217222, 808264910,
    1125498971, 839262099, 644130265, 936724658, 293458623, 415569596, 255336604, 90012372, 718547408, 846964002,
    787038308, 206932389, 368228891, 929864796, 818622, 876180189, 442289392, 457424467, 1027303865, 700067633,
]

# see if proposed tuple represents a triple
def verify_triple(ilist,result):
    if result == None:
        return False
    else:
        x = result[0]
        y = result[1]
        z =  x + y
        # keep input list as a LIST to account for duplicates
        # Note: the code below allows [175, 175] which for case 4.in IS a valid
        # triplet according to the spec, since 175 is repeated in the input list
        # and 350 is also in the input list.
        s = ilist[:]
        result_verify = False
        # ensure x, y, z all in s
        if x in s:
            #remove x from x
            s.remove(x)
            if y in s:
                #remove y from x
                s.remove(y)
                if z in s:
                    result_verify = True
        return result_verify

class TestProblem01(unittest.TestCase):
    # small list, one possible triple
    def test_find_triple_1(self):
        ilist = [23,3,16,50,11,15,7]
        result = quiz.find_triple(ilist)
        self.assertTrue(verify_triple(ilist,result))

    # medium list, multiple possible triple
    def test_find_triple_2(self):
        ilist = [20, 68, 76, 55, 38, 39, 125, 90, 92, 71, 102, 81, 47, 57, 28, 111]
        result = quiz.find_triple(ilist)
        self.assertTrue(verify_triple(ilist,result))

    # big list, multiple possible triple
    def test_find_triple_3(self):
        ilist = big1
        result = quiz.find_triple(ilist)
        self.assertTrue(verify_triple(ilist,result))

    # medium list, one triple
    def test_find_triple_4(self):
        ilist = [175, 96, 280, 389, 346, 22, 182, 350, 203, 275, 313, 305, 287, 320, 1, 44, 277, 56, 412, 374, 175, 116, 64, 127,437, 439]
        result = quiz.find_triple(ilist)
        self.assertTrue(verify_triple(ilist,result))

    # medium list, no triple
    def test_find_triple_5(self):
        ilist = [845, 584, 201, 623, 977, 66, 794, 504, 800, 942, 641, 237, 219 ,543 ,390 ,205 ,371 ,292 ,448 ,61 ,865, 912, 568 ,225 ,487 ,192 ,812 ,618, 419, 979 ,220 ,896, 954, 872]
        self.assertTrue(quiz.find_triple(ilist) is None)

    # big list, no triple
    def test_find_triple_6(self):
        ilist =  big2
        self.assertTrue(quiz.find_triple(ilist) is None)

##################################################
##  Problem 02 Tests
##################################################

class TestProblem02(unittest.TestCase):
    def test_is_quasidrome_1(self):
        arg = "racecar"
        self.assertTrue(quiz.is_quasidrome(arg))

    def test_is_quasidrome_2(self):
        arg = "abc"
        self.assertFalse(quiz.is_quasidrome(arg))

    def test_is_quasidrome_3(self):
        arg = "racercar"
        self.assertTrue(quiz.is_quasidrome(arg))

    def test_is_quasidrome_4(self):
        arg = "ab"
        self.assertTrue(quiz.is_quasidrome(arg))

    def test_is_quasidrome_5(self):
        arg = "racrrcar"
        self.assertTrue(quiz.is_quasidrome(arg))

##################################################
##  Problem 03 Tests
##################################################

# sum elements of a sequence
def verify_sequence(seq,start,end):
    if start <= end:
        # regular sequence
        return sum(seq[start : end+1])
    else:
        # circular subsequence
        return sum(seq[start:]) + sum(seq[:end+1])

class TestProblem03(unittest.TestCase):
    def test_max_subsequence_1(self):
        ilist = [1,55,3,-100,30,80]
        start, end = quiz.max_subsequence(ilist)
        # print(start, end)
        self.assertEqual(verify_sequence(ilist,start,end),110)

    # long list, circular
    def test_max_subsequence_2(self):
        ilist = [1,-1,-1,1,-1,1,-2,2,2,-2,2,-2,2,3,-3,4,1,-1,-1,1,-5,1,-2,2,2,-2,2,-2,2,3,-3,2,1,-1,-1,1,-6,6,-2,2,2,-2,2,-2,1,3,-3,4]
        start, end = quiz.max_subsequence(ilist,is_circular=True)
        self.assertEqual(verify_sequence(ilist,start,end),18)

    # trivial list
    def test_max_subsequence_3(self):
        ilist = [0,-1]
        start, end = quiz.max_subsequence(ilist)
        self.assertEqual(verify_sequence(ilist,start,end),0)

    # short circular list
    def test_max_subsequence_4(self):
        ilist = [1,-3,1]
        start, end = quiz.max_subsequence(ilist,is_circular=True)
        self.assertEqual(verify_sequence(ilist,start,end),2)

    # very long circular list
    def test_max_subsequence_5(self):
        ilist = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        start, end = quiz.max_subsequence(ilist,is_circular=True)
        self.assertEqual(verify_sequence(ilist,start,end),613)

    # circular subsequence
    def test_max_subsequence_6(self):
        ilist = [1,55,3,-100,30,80]
        start, end = quiz.max_subsequence(ilist,is_circular=True)
        self.assertEqual(verify_sequence(ilist,start,end),169)


##################################################
##  Problem 04 Tests
##################################################

class TestProblem04(unittest.TestCase):
    def test_count_triangles_1(self):
        edges = [["1","2"]]
        self.assertEqual(quiz.count_triangles(edges),0)

    def test_count_triangles_2(self):
        edges = [["1","2"], ["2","3"], ["1","3"]]
        self.assertEqual(quiz.count_triangles(edges),1)

    def test_count_triangles_3(self):
        edges = [["1","2"], ["1","3"], ["2","3"], ["1","4"], ["2","4"]]
        self.assertEqual(quiz.count_triangles(edges),2)

    def test_count_triangles_4(self):
        edges = [["1","3"], ["1","4"], ["2","4"], ["2","5"], ["3","5"],
                 ["1","2"], ["2","3"], ["3","4"], ["4","5"], ["5","1"]]
        self.assertEqual(quiz.count_triangles(edges),10)

    def test_count_triangles_5(self):
        edges = [["1","2"], ["1","3"], ["1","4"], ["1","5"], ["1","6"],
                 ["1","7"], ["1","8"], ["1","9"], ["1","10"], ["1","11"],
                 ["2","3"], ["2","4"], ["2","5"], ["2","6"], ["2","7"],
                 ["2","8"], ["2","9"], ["2","10"], ["2","11"], ["2","12"],
                 ["3","4"], ["4","5"], ["5","6"], ["6","7"], ["7","8"],
                 ["8","9"], ["9","10"], ["10","11"], ["11","12"], ["12","1"]]
        self.assertEqual(quiz.count_triangles(edges),28)

##################################################
##  Problem 05 Tests
##################################################

class TestProblem05(unittest.TestCase):
    def test_is_unique_1(self):
        A = [0,1,2,3,4]
        self.assertTrue(quiz.is_unique(A))

    def test_is_unique_2(self):
        A = [0]
        self.assertTrue(quiz.is_unique(A))

    def test_is_unique_3(self):
        A = [1,1]
        self.assertFalse(quiz.is_unique(A))

    def test_is_unique_4(self):
        A = [1,0,4,-1,0,100,-9999]
        self.assertFalse(quiz.is_unique(A))

    def test_is_unique_5(self):
        A = [1,1,1]
        self.assertFalse(quiz.is_unique(A))

##################################################
##  Problem 06 Tests
##################################################

class TestProblem06(unittest.TestCase):
    def test_matrix_product_1(self):
        A = [1]
        B = [1]
        m,n,k = 1,1,1
        result = [1]
        self.assertEqual(quiz.matrix_product(A,B,m,n,k),result)

    def test_matrix_product_2(self):
        A = [0,0,0,0]
        B = [0,0,0,0]
        m,n,k = 2,2,2
        result = [0,0,0,0]
        self.assertEqual(quiz.matrix_product(A,B,m,n,k),result)

    def test_matrix_product_3(self):
        A = [1,0,0,0,1,0,0,0,1]
        B = [1,1,1,1,1,1,1,1,1,1,1,1]
        m,n,k = 3,3,4
        result = [1,1,1,1,1,1,1,1,1,1,1,1]
        self.assertEqual(quiz.matrix_product(A,B,m,n,k),result)

    def test_matrix_product_4(self):
        A = [1,2,3,4]
        B = [1,3,2,4]
        m,n,k = 2,2,2
        result = [5,11,11,25]
        self.assertEqual(quiz.matrix_product(A,B,m,n,k),result)

    def test_matrix_product_5(self):
        A = [1,2,3,4,5,6]
        B = [1,2]
        m,n,k = 3,2,1
        result = [5,11,17]
        self.assertEqual(quiz.matrix_product(A,B,m,n,k),result)

##################################################
##  Problem 07 Tests
##################################################

class TestProblem07(unittest.TestCase):
    def test_mode_1(self):
        A = [3,4,1,2,5]
        self.assertEqual(quiz.mode(A),3)

    def test_mode_2(self):
        A = [5,4,1,2,2]
        self.assertEqual(quiz.mode(A),2)

    def test_mode_3(self):
        A = [5,4,1,2,3,4,1]
        self.assertEqual(quiz.mode(A),4)

    def test_mode_4(self):
        A = [5,3,10,10,7,999999,-6,4,5,10]
        self.assertEqual(quiz.mode(A),10)

    def test_mode_5(self):
        A = [1,1,1,1,2,2,2,3,3,3,3,3]
        self.assertEqual(quiz.mode(A),3)

##################################################
##  Problem 08 Tests
##################################################

class TestProblem08(unittest.TestCase):
    def test_transpose_1(self):
        A = [1,1,0,0]
        m,n = 2,2
        result = [1,0,1,0]
        self.assertEqual(quiz.transpose(A,m,n),result)

    def test_transpose_2(self):
        A = [1,2,3,4,5,6,7,8]
        m,n = 4,2
        result = [1,3,5,7,2,4,6,8]
        self.assertEqual(quiz.transpose(A,m,n),result)

    def test_transpose_3(self):
        A = [1]
        m,n = 1,1
        result = [1]
        self.assertEqual(quiz.transpose(A,m,n),result)

    def test_transpose_4(self):
        A = [1,2,3,4,5,6]
        m,n = 1,6
        result = [1,2,3,4,5,6]
        self.assertEqual(quiz.transpose(A,m,n),result)

    def test_transpose_5(self):
        A = [1,2,3,4,5,6,7,8,9]
        m,n = 3,3
        result = [1,4,7,2,5,8,3,6,9]
        self.assertEqual(quiz.transpose(A,m,n),result)

##################################################
##  Problem 09 Tests
##################################################

class TestProblem09(unittest.TestCase):
    def test_check_valid_paren_1(self):
        s = "()"
        self.assertTrue(quiz.check_valid_paren(s))

    def test_check_valid_paren_2(self):
        s = "(()))("
        self.assertFalse(quiz.check_valid_paren(s))

    def test_check_valid_paren_3(self):
        s =  "((((())))))"
        self.assertFalse(quiz.check_valid_paren(s))

    def test_check_valid_paren_4(self):
        s = "(())(()(())()())((()()))"
        self.assertTrue(quiz.check_valid_paren(s))

    def test_check_valid_paren_5(self):
        s = "(())())())((()()(()))()()())((()()()()(())))(((()()))()()))"
        self.assertFalse(quiz.check_valid_paren(s))

##################################################
##  Problem 10 Tests
##################################################

class TestProblem10(unittest.TestCase):
    def test_get_all_elements_1(self):
        root = {
            "value": 0,
            "left": None,
            "right": None
        }
        result = [0]
        self.assertEqual(sorted(quiz.get_all_elements(root)),result)

    def test_get_all_elements_2(self):
        root = {
            "value": 1,
            "left": {
                "value": -5,
                "left":   {
                    "value": -10,
                    "left": None,
                    "right": None
                },
                "right":  {
                    "value": 0,
                    "left":   {
                        "value": -1,
                        "left": None,
                        "right": None
                    },
                    "right": None
                }
            },
            "right":  {
                "value": 2,
                "left": None,
                "right":  {
                    "value": 100,
                    "left": None,
                    "right": None
                }
            }
        }
        result = [-10, -5, -1, 0, 1, 2, 100]
        self.assertEqual(sorted(quiz.get_all_elements(root)),result)

    def test_get_all_elements_3(self):
        root = {
            "value": 0,
            "left": {
                "value": -1,
                "left": None,
                "right": {
                    "value": -1,
                    "left": None,
                    "right":  None
                }
            },
            "right": {
                "value": 0,
                "left": None,
                "right": None
            }
        }
        result = [-1,-1,0,0]
        self.assertEqual(sorted(quiz.get_all_elements(root)),result)

    def test_get_all_elements_4(self):
        root = {
            "value": 1,
            "left": None,
            "right": {
                "value": 3,
                "left": None,
                "right": {
                    "value": 6,
                    "left": None,
                    "right": {
                        "value": 10,
                        "left": None,
                        "right": {
                            "value": 15,
                            "left": None,
                            "right": {
                                "value": 21,
                                "left": None,
                                "right": {
                                    "value": 28,
                                    "left": None,
                                    "right":  {
                                        "value": 36,
                                        "left": None,
                                        "right": None
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        result = [1, 3, 6, 10, 15, 21, 28, 36]
        self.assertEqual(sorted(quiz.get_all_elements(root)),result)

    def test_get_all_elements_5(self):
        root = {
            "value": 0,
            "left": {
                "value": -10,
                "left": {
                    "value": -90,
                    "left": {
                        "value": -100,
                        "left": None,
                        "right": None
                    },
                    "right":  {
                        "value": -50,
                        "left": None,
                        "right": None
                    }
                },
                "right":  {
                    "value": -4,
                    "left": None,
                    "right": None
                }
            },
            "right": {
                "value": 50,
                "left": {
                    "value": 10,
                    "left": {
                        "value": 5,
                        "left": None,
                        "right": None
                    },
                    "right":  {
                        "value": 20,
                        "left": {
                            "value": 15,
                            "left": None,
                            "right": None
                        },
                        "right":  {
                            "value": 30,
                            "left": None,
                            "right": None
                        }
                    }
                },
                "right": None
            }
        }
        result = [-100, -90, -50, -10, -4, 0, 5, 10, 15, 20, 30, 50]
        self.assertEqual(sorted(quiz.get_all_elements(root)),result)

##################################################
##  Problem 11 Tests
##################################################

# verify reported path
def verify_path(grid,path,gold):
    if path is None:
        # no path reported
        return gold is False
    elif gold is False:
        # path reported, but there isn't one
        return False

    # path reported; it should be a list
    if not isinstance(path,list):
        return False

    ncols = len(grid[0])
    nrows = len(grid)

    # there should a path coord for each row
    if len(path) != nrows: return False

    # check the path row-by-by
    oldc = None
    for i in range(nrows):
        # expecting a 2-element tuple of ints
        if not isinstance(path[i],tuple) or len(path[i]) != 2:
            return False
        r,c = path[i]
        if not isinstance(r,int) or not isinstance(c,int):
            return False

        # check that r and c are legal and that the
        # corresponding grid point is 1
        if r != i or not (0 <= c < ncols) or grid[r][c] != 1:
            return False

        # verify that column dx is -1,0,1:
        if oldc is not None:
            if c < oldc-1 or c > oldc+1:
                return False
        oldc = c

    # path verified
    return True

##################################################
##  Problem 11 Tests
##################################################

class TestProblem11(unittest.TestCase):
    # small grid, one path
    def test_find_path_1(self):
        grid = [[0,0,1],
                [0,1,0],
                [1,0,0]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,True))

    # small grid, one path
    def test_find_path_2(self):
        grid = [[0,1,0,0,1,0,0,1,0],
                [0,1,0,0,1,0,1,1,1],
                [0,1,0,1,0,1,0,1,0],
                [1,1,0,1,0,0,0,0,0],
                [1,0,0,0,1,0,1,0,1],
                [0,0,0,0,0,1,1,1,1]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,True))

    # small grid, multiple possible paths
    def test_find_path_3(self):
        grid = [[0,1,0,0,1,0],
                [0,1,0,1,0,1],
                [1,0,0,1,0,1],
                [1,0,0,0,1,0],
                [0,0,1,0,1,0]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,True))

    # medium grid, one possible path
    def test_find_path_4(self):
        grid = [[0,0,1,1,0,1,1,0,1,0],
                [0,0,0,1,0,1,0,0,0,1],
                [0,0,1,0,1,0,0,0,1,0],
                [0,0,0,1,0,1,0,0,0,1],
                [0,0,1,0,0,1,0,0,1,0],
                [0,0,1,0,0,1,0,0,0,1],
                [0,1,0,0,0,1,0,0,1,0],
                [0,0,1,0,1,0,0,0,0,1],
                [0,0,1,0,0,1,0,0,1,0],
                [0,1,0,0,1,0,0,0,0,1],
                [0,1,0,0,0,1,0,0,1,0],
                [1,0,1,0,1,0,0,0,0,1],
                [0,1,0,1,0,0,0,0,1,0],
                [1,0,0,0,0,0,0,0,0,1],
                [0,0,1,0,1,0,1,0,1,0]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,True))

    # medium grid, one possible path
    def test_find_path_5(self):
        grid = [[1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0],
                [0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 1, 0],
                [0, 0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0, 0],
                [0, 1, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0],
                [0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 1, 0],
                [0, 0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0, 0],
                [0, 1, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,True))

    # big grid, multiple possible paths
    def test_find_path_6(self):
        grid = [
            [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
            [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1],
            [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
            [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1],
            [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1],
            [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0],
            [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0],
            [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0],
            [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
            [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0],
            [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1],
            [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1],
            [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
            [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],
            [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0],
            [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0],
            [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
            [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1],
            [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
            [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1],
            [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0],
            [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1],
            [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1],
            [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
            [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1],
            [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1],
            [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
            [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1],
            [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1],
            [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0],
            [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1],
            [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
            [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0],
            [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1],
            [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1],
            [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1],
            [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,True))

    # medium grid, no path
    def test_find_path_7(self):
        grid = [[1, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                [0, 0, 1, 0, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,False))

    # big grid, no path
    def test_find_path_8(self):
        grid = [[0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0],
                [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1],
                [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0],
                [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0],
                [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1],
                [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0],
                [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],
                [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0],
                [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1],
                [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1],
                [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1],
                [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
                [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0],
                [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
                [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1],
                [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1]]
        path = quiz.find_path(grid)
        self.assertTrue(verify_path(grid,path,False))


##################################################
##  Problem 12 Tests
##################################################

class TestProblem12(unittest.TestCase):
    def test_longest_sequence_1(self):
        seq = ""
        self.assertEqual(quiz.longest_sequence(seq),0)

    def test_longest_sequence_2(self):
        seq = "ppqqss"
        self.assertEqual(quiz.longest_sequence(seq),2)

    def test_longest_sequence_3(self):
        seq = "abaabaaa"
        self.assertEqual(quiz.longest_sequence(seq),3)

    def test_longest_sequence_4(self):
        seq = "aaaaabaaaaaaaaaaaa"
        self.assertEqual(quiz.longest_sequence(seq),12)

    def test_longest_sequence_5(self):
        seq = "aabbbccddddefffff"
        self.assertEqual(quiz.longest_sequence(seq),5)

##################################################
##  Problem 13 Tests
##################################################

class TestProblem13(unittest.TestCase):
    def test_integer_right_triangles_1(self):
        p = 12
        result = [[3, 4, 5]]
        self.assertEqual(quiz.integer_right_triangles(p),result)

    def test_integer_right_triangles_2(self):
        p = 60
        result = [[10,24,26], [15,20,25]]
        self.assertEqual(quiz.integer_right_triangles(p),result)

    def test_integer_right_triangles_3(self):
        p = 152
        result = []
        self.assertEqual(quiz.integer_right_triangles(p),result)

    def test_integer_right_triangles_4(self):
        p = 240
        result = [[15, 112, 113], [40, 96, 104], [48, 90, 102], [60, 80, 100]]
        self.assertEqual(quiz.integer_right_triangles(p),result)

    # this test case is very slooooow unless your solution is very clever
    # (about 14 secs on my machine)
    def test_integer_right_triangles_5(self):
        p = 5000
        result = [[1000, 1875, 2125]]
        self.assertEqual(quiz.integer_right_triangles(p),result)

##################################################
##  Problem 14 Tests
##################################################

class TestProblem14(unittest.TestCase):
    def test_encode_nested_list_1(self):
        seq = []
        result = ['up', 'down']
        self.assertEqual(quiz.encode_nested_list(seq),result)

    def test_encode_nested_list_2(self):
        seq = [1]
        result = ['up', 1, 'down']
        self.assertEqual(quiz.encode_nested_list(seq),result)

    def test_encode_nested_list_3(self):
        seq = [1, [2], 1]
        result = ['up', 1, 'up', 2, 'down', 1, 'down']
        self.assertEqual(quiz.encode_nested_list(seq),result)

    def test_encode_nested_list_4(self):
        seq = [[[1, [2]]]]
        result = ['up', 'up', 'up', 1, 'up', 2, 'down', 'down', 'down', 'down']
        self.assertEqual(quiz.encode_nested_list(seq),result)

    def test_encode_nested_list_5(self):
        seq = [[1, 2, 3], [[[1]]], 6, [2, 3, [12, 9, 8, 6], 47], [1, []]]
        result = ['up', 'up', 1, 2, 3, 'down', 'up', 'up', 'up', 1, 'down',
                  'down', 'down', 6, 'up', 2, 3, 'up', 12, 9, 8, 6, 'down',
                  47, 'down', 'up', 1, 'up', 'down', 'down', 'down']
        self.assertEqual(quiz.encode_nested_list(seq),result)

if __name__ == '__main__':
    res = unittest.main(verbosity=3, exit=False)
